import ee
from google.cloud import storage


def z_score_normalize(image, bbox):
    mean = image.reduceRegion(
        reducer=ee.Reducer.mean(), geometry=bbox, scale=30, maxPixels=1e13
    ).getNumber(image.bandNames().get(0))
    std_dev = image.reduceRegion(
        reducer=ee.Reducer.stdDev(), geometry=bbox, scale=30, maxPixels=1e13
    ).getNumber(image.bandNames().get(0))
    return image.subtract(mean).divide(std_dev)


def make_vulnerability_data(bbox):
    print("Generating vulnerability data...")

    imageCollection = ee.ImageCollection("projects/sat-io/open-datasets/GRIDDED_EC-GDP")
    # Filter the collection for the most recent available year (2019)
    start_date = ee.Date.fromYMD(2019, 1, 1)
    end_date = ee.Date.fromYMD(2019, 12, 31)
    gdp_ec_adj = imageCollection.filterDate(start_date, end_date).median().clip(bbox)

    population = (
        ee.ImageCollection("projects/sat-io/open-datasets/hrsl/hrslpop")
        .median()
        .clip(bbox)
    )

    # First, z-score the adjusted GDP
    gdp_normalized = z_score_normalize(gdp_ec_adj, bbox)

    # Second, Z-score normalize population
    population_normalized = z_score_normalize(population, bbox)

    # Then, divide population by the Z-scored product of GDP and HDI
    vuln = population_normalized.divide(gdp_normalized).rename("vuln")

    return population, vuln
