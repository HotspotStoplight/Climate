from data_utils.export_and_monitor import start_export_task
from data_utils.monitor_tasks import monitor_tasks
from data_utils.pygeoboundaries import get_adm_ee
from data_utils.exposure_and_vulnerability import make_vulnerability_data
from google.cloud import storage
import ee
import geemap

cloud_project = 'hotspotstoplight'

def process_flood_data(place_name):
    scale = 30

    if not isinstance(place_name, str):
        return "Error: Place name must be a string in quotation marks."

    snake_case_place_name = place_name.replace(' ', '_').lower()

    aoi = get_adm_ee(territories=place_name, adm='ADM0')
    bbox = aoi.geometry().bounds()

    # Define Google Cloud Storage bucket name and fileNamePrefix
    bucket_name = f'hotspotstoplight_populationvulnerability'
    directory_name = f'data/{snake_case_place_name}/inputs/'
    
    # Initialize Google Cloud Storage client and create the new directory
    storage_client = storage.Client(project=cloud_project)
    bucket = storage_client.bucket(bucket_name)
    blob = bucket.blob(directory_name)  # This creates a 'directory' by specifying a blob that ends with '/'
    blob.upload_from_string('', content_type='application/x-www-form-urlencoded;charset=UTF-8')  # Create the directory
    
    # Initialize tasks list before appending new tasks
    tasks = []

    population, vuln = make_vulnerability_data(bbox)
    vulnFileNamePrefix = f'data/{snake_case_place_name}/outputs/vulnerability'
    popFileNamePrefix = f'data/{snake_case_place_name}/outputs/population'

    # Start export task for vulnerability data and append it to the tasks list
    vuln_task = start_export_task(vuln, "Vulnerability", bucket_name, vulnFileNamePrefix, scale=scale)
    tasks.append(vuln_task)

    # Start export task for population data and append it to the tasks list
    pop_task = start_export_task(population, "Population", bucket_name, popFileNamePrefix, scale=scale)
    tasks.append(pop_task)

    # Monitor tasks at the end, after all tasks have been appended
    monitor_tasks(tasks)

    print(f"Processing for {place_name} completed and data saved to Google Cloud in the {snake_case_place_name} directory.")

